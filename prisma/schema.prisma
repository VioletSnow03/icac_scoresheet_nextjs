// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  userId       String   @id @default(auto()) @map("_id") @db.ObjectId
  username     String   @unique
  firstName    String
  lastName     String
  university   String
  email        String   @unique
  passwordHash String
  signUpDate   DateTime @default(now())

  // Foreign Key Fields
  competitionIds String[] @default([]) @db.ObjectId
  signUpSheetIds String[] @default([]) @db.ObjectId

  // Foreign Key Relations
  competitions Competition[] @relation(fields: [competitionIds], references: [competitionId]) // each User can be registered to MANY Competitions
  signUpSheets SignUpSheet[] @relation(fields: [signUpSheetIds], references: [signUpSheetId]) // each User can be signed up on MANY SignUpSheets
  scoresheets  Scoresheet[] // each User can have MANY Scoresheets
}

model RangeMaster {
  rangeMasterId String   @id @default(auto()) @map("_id") @db.ObjectId
  university    String
  clubName      String   @unique
  email         String   @unique
  passwordHash  String
  signUpDate    DateTime @default(now())

  // each RangeMaster can host/start MANY Competitions
  competitionsHosted Competition[]
}

model Competition {
  competitionId   String    @id @default(auto()) @map("_id") @db.ObjectId
  competitionName String
  competitionDate DateTime?
  university      String?
  round           String?
  address         Json?
  archers         String[]  @default([]) @db.ObjectId
  judges          String[]  @default([]) @db.ObjectId

  // Foreign Key Fields
  rangeMasterId  String?  @db.ObjectId
  participantIds String[] @default([]) @db.ObjectId

  // Foreign Key Relations
  participants User[]       @relation(fields: [participantIds], references: [userId]) // each Competition can have MANY participants (Users)
  hostedBy     RangeMaster? @relation(fields: [rangeMasterId], references: [rangeMasterId]) // each Competition can only be hosted/started by ONE RangeMaster
  signUpSheet  SignUpSheet? // each Competition can only have ONE SignUpSheet
  scoresheets  Scoresheet[] // each competition can have MANY scoresheets

  @@unique([competitionName, competitionDate, university])
}

model SignUpSheet {
  signUpSheetId   String    @id @default(auto()) @map("_id") @db.ObjectId
  competitionName String
  competitionDate DateTime?
  university      String?
  round           String?

  // Foreign Key Fields
  competitionId  String   @unique @db.ObjectId
  participantIds String[] @default([]) @db.ObjectId

  // Foreign Key Relations
  competition  Competition @relation(fields: [competitionId], references: [competitionId]) // each SignUpSheet can only be for ONE competition
  participants User[]      @relation(fields: [participantIds], references: [userId]) // each SignUpSheet can have MANY Users

  @@unique([competitionName, competitionDate, university])
}

model Scoresheet {
  scoresheetId    String    @id @default(auto()) @map("_id") @db.ObjectId
  target          Int
  scoresheet      Json
  competitionName String
  competitionDate DateTime?
  university      String?
  round           String?

  // Foreign Key Fields
  competitionId String @db.ObjectId
  userId        String @db.ObjectId

  // Foreign Key Relations
  competition Competition @relation(fields: [competitionId], references: [competitionId]) // each Scoresheet can only refer to ONE Competition
  user        User        @relation(fields: [userId], references: [userId]) // each Scoresheet can only belong to ONE User

  // accelerate runtime queries by allowing indexed search using userId and competitionName number
  @@index([userId, competitionName])
}
